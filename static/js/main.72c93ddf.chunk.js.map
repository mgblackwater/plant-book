{"version":3,"sources":["logo.svg","plant-components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PlantContainer","plant","Card","style","marginBottom","width","CardContent","displ","src","imageUrl","maxWidth","textAlign","species","leafColor","lifeSpan","this","App","plantA","plantB","plants","className","margin","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,8ICuB5BC,EAnBQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACxB,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,aAAc,GAAIC,MAAO,QACtC,kBAACC,EAAA,EAAD,KACE,6BACE,6BACE,yBAAKC,OAAK,EAACC,IAAKP,EAAMQ,SAAUN,MAAO,CAAEO,SAAU,UACnD,yBAAKP,MAAO,CAAEQ,UAAW,SACvB,gDAAsBV,EAAMW,SAC5B,2CAAiBX,EAAMW,SACvB,6CAAmBX,EAAMY,WACzB,4CAAkBZ,EAAMa,gBCVhCb,EACJ,WAAYW,EAASH,EAAUI,EAAWC,GAAW,oBACnDC,KAAKH,QAAUA,EACfG,KAAKN,SAAWA,EAChBM,KAAKF,UAAYA,EACjBE,KAAKD,SAAWA,GAyCLE,MArCf,WACE,IAAMC,EAAS,IAAIhB,EACjB,kBACA,qWACA,QACA,WAEIiB,EAAS,IAAIjB,EACjB,WACA,iGACA,aACA,WAQIkB,EAAS,CANA,IAAIlB,EACjB,gBACA,+GACA,8BACA,WAEsBgB,EAAQC,GAChC,OACE,yBAAKE,UAAU,OACb,yBACEjB,MAAO,CACLE,MAAO,SACPgB,OAAQ,WAGV,kDACCF,EAAOG,KAAI,SAACrB,GAAD,OACV,kBAAC,EAAD,CAAgBA,MAAOA,UChCbsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.72c93ddf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nconst PlantContainer = ({ plant }) => {\n  return (\n    <Card style={{ marginBottom: 20, width: \"400\" }}>\n      <CardContent>\n        <div>\n          <div>\n            <img displ src={plant.imageUrl} style={{ maxWidth: \"100%\" }}></img>\n            <div style={{ textAlign: \"left\" }}>\n              <div> Plant species: {plant.species}</div>\n              <div> Species : {plant.species}</div>\n              <div> leaf color: {plant.leafColor}</div>\n              <div> life Span: {plant.lifeSpan}</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\nexport default PlantContainer;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlantContainer from \"./plant-components\";\n\nclass plant {\n  constructor(species, imageUrl, leafColor, lifeSpan) {\n    this.species = species;\n    this.imageUrl = imageUrl;\n    this.leafColor = leafColor;\n    this.lifeSpan = lifeSpan;\n  }\n}\n\nfunction App() {\n  const plantA = new plant(\n    \"Moonlight Potho\",\n    \"https://images.squarespace-cdn.com/content/v1/59480bc7725e25bf7ae3ade9/1499276424141-L2POPWFQ7SR1JM0TYMOJ/ke17ZwdGBToddI8pDm48kMJE_oPqVDlYco0BmZZqKB17gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z5QPOohDIaIeljMHgDF5CVlOqpeNLcJ80NK65_fV7S1URi4X8B9Krz2qQ9LtOQvf9tzTXvYGV_EBNca-TfE3VhzzrD36oouzk3SSBf3bbVhnA/Moonlight+6+inch.jpg?format=2500w\",\n    \"green\",\n    \"3 years\"\n  );\n  const plantB = new plant(\n    \"Montreal\",\n    \"https://img.crocdn.co.uk/images/products2/pl/20/00/03/20/pl2000032008.jpg?width=940&height=940\",\n    \"Dark green\",\n    \"5 years\"\n  );\n  const plantC = new plant(\n    \"Purple Orchid\",\n    \"https://s3.amazonaws.com/finegardening.s3.tauntoncloud.com/app/uploads/2018/01/23173930/041082036-01_xlg.jpg\",\n    \"Purple Flower, Green leaves\",\n    \"1 years\"\n  );\n  const plants = [plantC, plantA, plantB];\n  return (\n    <div className=\"App\">\n      <div\n        style={{\n          width: \"1024px\",\n          margin: \"0 auto\",\n        }}\n      >\n        <h1>My Favorite Plants</h1>\n        {plants.map((plant) => (\n          <PlantContainer plant={plant} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}